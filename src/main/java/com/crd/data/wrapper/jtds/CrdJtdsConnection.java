/*	Copyright (c) 2015
 *	by Charles River Development, Inc., Burlington, MA
 *
 *	This software is furnished under a license and may be used only in
 *	accordance with the terms of such license.  This software may not be
 *	provided or otherwise made available to any other party.  No title to
 *	nor ownership of the software is hereby transferred.
 *
 *	This software is the intellectual property of Charles River Development, Inc.,
 *	and is protected by the copyright laws of the United States of America.
 *	All rights reserved internationally.
 *
 */
package com.crd.data.wrapper.jtds;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;

import com.crd.data.wrapper.ConnectionWrapper;

/**
 * CrdJtdsConnection
 * @author yshao
 *
 */
public class CrdJtdsConnection extends ConnectionWrapper {

	public CrdJtdsConnection(Connection conn) {
		super(conn);
	}
	
	@Override
	public Statement createStatement() throws SQLException {
		return new CrdJtdsStatement(this, super.createStatement());
	}
	
	@Override
	public PreparedStatement prepareStatement(final String sql)throws SQLException {
		return new CrdJtdsPreparedStatement(this, super.prepareStatement(sql));
	}
	
	@Override
	public CallableStatement prepareCall(final String sql) throws SQLException {
		return new CrdJtdsCallableStatement(this, super.prepareCall(sql));
	}
	
	@Override
	public DatabaseMetaData getMetaData() throws SQLException {
		return new CrdJtdsDatabaseMetaData(this, super.getMetaData());
	}
	
	@Override
	public Statement createStatement(final int resultSetType, final int resultSetConcurrency) throws SQLException {
		return new CrdJtdsStatement(this, super.createStatement(resultSetType, resultSetConcurrency));
	}
	
	@Override
	public PreparedStatement prepareStatement(final String sql, final int resultSetType, final int resultSetConcurrency) throws SQLException {
		return new CrdJtdsPreparedStatement(this, super.prepareStatement(sql, resultSetType, resultSetConcurrency));
	}
	
	@Override
	public CallableStatement prepareCall(final String sql, final int resultSetType, final int resultSetConcurrency) throws SQLException {
		return new CrdJtdsCallableStatement(this, super.prepareCall(sql, resultSetType, resultSetConcurrency));
	}
	
	@Override
	public Statement createStatement(final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) throws SQLException {
		return new CrdJtdsStatement(this, super.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability));
	}
	
	@Override
	public PreparedStatement prepareStatement(final String sql, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) throws SQLException {
		return new CrdJtdsPreparedStatement(this, super.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability));
	}
	
	@Override 
	public CallableStatement prepareCall(final String sql, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) throws SQLException {
		return new CrdJtdsCallableStatement(this, super.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability));
	}
	
	@Override
	public PreparedStatement prepareStatement(final String sql, final int autoGeneratedKeys) throws SQLException {
		return new CrdJtdsPreparedStatement(this, super.prepareStatement(sql, autoGeneratedKeys));
	}
	
	@Override
	public PreparedStatement prepareStatement(final String sql, final int[] columnIndexes) throws SQLException {
		return new CrdJtdsPreparedStatement(this, super.prepareStatement(sql, columnIndexes));
	}
	
	@Override
	public PreparedStatement prepareStatement(final String sql, final String[] columnNames) throws SQLException {
		return new CrdJtdsPreparedStatement(this, super.prepareStatement(sql, columnNames));
	}
}
